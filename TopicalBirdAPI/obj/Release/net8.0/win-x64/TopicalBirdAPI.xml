<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TopicalBirdAPI</name>
    </assembly>
    <members>
        <member name="T:TopicalBirdAPI.Controllers.AuthController">
            <summary>
            controls authentication
            </summary>
        </member>
        <member name="M:TopicalBirdAPI.Controllers.AuthController.#ctor(TopicalBirdAPI.Data.AppDbContext,Microsoft.AspNetCore.Identity.UserManager{TopicalBirdAPI.Models.Users},TopicalBirdAPI.Helpers.LoggingHelper,Microsoft.AspNetCore.Identity.SignInManager{TopicalBirdAPI.Models.Users})">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:TopicalBirdAPI.Controllers.AuthController.RegisterToTopicalbird(TopicalBirdAPI.Data.DTO.UsersDTO.CreateUserRequest)">
            <summary>
            Register a new user
            </summary>
            <response code="200">Returns the newly created user.</response>
            <response code="400">If the data provided is not valid.</response>
            <response code="403">If you are logged in.</response>
            <response code="409">If username or email is already taken.</response>
            <response code="500">If an unexpected error happens.</response>
        </member>
        <member name="M:TopicalBirdAPI.Controllers.AuthController.LogInToTopicalbird(TopicalBirdAPI.Data.DTO.AuthDTO.UserLoginRequest)">
            <summary>
            Login existing user
            </summary>
            <response code="200">Logs the user in and sets the cookies.</response>
            <response code="400">If the data provided is invalid.</response>
            <response code="401">If email or password is incorrect.</response>
        </member>
        <member name="M:TopicalBirdAPI.Controllers.AuthController.LogOutFromTopicalbird">
            <summary>
            Logout current user
            </summary>
            <response code="200">Confirms user has logged out.</response>
        </member>
        <member name="M:TopicalBirdAPI.Controllers.AuthController.ChangePassword(TopicalBirdAPI.Data.DTO.AuthDTO.ChangePasswordRequest)">
            <summary>
            Change password
            </summary>
            <response code="200">Returns confirmation of password change</response>
            <response code="400">If the data provided is invalid.</response>
            <response code="401">If the user is not logged in.</response>
        </member>
        <member name="T:TopicalBirdAPI.Controllers.CommentsController">
            <summary>
            Post comment manipulation
            </summary>
        </member>
        <member name="M:TopicalBirdAPI.Controllers.CommentsController.CreateComment(System.Guid,TopicalBirdAPI.Data.DTO.CommentDTO.CreateCommentRequest)">
            <summary>
            Create a new comment
            </summary>
            <param name="postId">Post ID of post to comment on</param>
            <param name="comment">DTO of comment</param>
            <returns>Created comment</returns>
            <response code="200">Returns created comment.</response>
            <response code="400">If provided data is invalid.</response>
            <response code="401">If user is not logged in.</response>
            <response code="404">If post is not found.</response>
        </member>
        <member name="M:TopicalBirdAPI.Controllers.CommentsController.GetAllCommentsOfPostById(System.Guid)">
            <summary>
            Get all comment of post
            </summary>
            <param name="postId">The post ID to fetch</param>
            <returns>Object containing all comments</returns>
            <response code="200">Returns the list of comments</response>
            <response code="404">If the post is not found.</response>
        </member>
        <member name="M:TopicalBirdAPI.Controllers.CommentsController.UpdateCommentContent(System.Guid,TopicalBirdAPI.Data.DTO.CommentDTO.CreateCommentRequest)">
            <summary>
            Update a comment
            </summary>
            <param name="commentId">Id of comment to update</param>
            <param name="commentDto">Comment data</param>
            <returns>updated comment.</returns>
            <response code="200">Returns the updated comment.</response>
            <response code="400">If provided data is incorrect.</response>
            <response code="403">If user is not the comment author.</response>
            <response code="404">If comment was not found.</response>
        </member>
        <member name="M:TopicalBirdAPI.Controllers.CommentsController.RemoveCommentById(System.Guid)">
            <summary>
            Deletes a comment
            </summary>
            <param name="commentId">Id of comment to delete</param>
            <returns>Success message</returns>
            <response code="404">If comment is not found</response>
            <response code="403">If user isnt author or admin</response>
            <response code="401">If user int logged in</response>
            <response code="200">Success message</response>
        </member>
        <member name="T:TopicalBirdAPI.Controllers.NestController">
            <summary>
            Controls nest related actions
            </summary>
        </member>
        <member name="M:TopicalBirdAPI.Controllers.NestController.CreateSingleNest(TopicalBirdAPI.Data.DTO.NestDTO.CreateNestRequest)">
            <summary>
            Create a new nest
            </summary>
            <param name="nestDto">DTO for creating new nest</param>
            <response code="200">Returns newly created nest</response>
            <response code="400">If provided data is invalid.</response>
            <response code="401">If user is not logged in</response>
            <response code="409">If nest already exists.</response>
            <response code="500">If an unexpected error happens.</response>
        </member>
        <member name="M:TopicalBirdAPI.Controllers.NestController.GetSingleNestById(System.Guid)">
            <summary>
            Get nest by id
            </summary>
            <param name="id">Id of nest</param>
            <response code="200">Returns the nest</response>
            <response code="404">If nest is not found.</response>
        </member>
        <member name="M:TopicalBirdAPI.Controllers.NestController.GetSingleNestByTitle(System.String)">
            <summary>
            Get nest by nest title
            </summary>
            <param name="title">Title of nest</param>
            <response code="200">Returns the nest</response>
            <response code="404">If nest is not found.</response>
        </member>
        <member name="M:TopicalBirdAPI.Controllers.NestController.SearchByQuery(System.String,System.Int32,System.Int32)">
            <summary>
            Search a nest
            </summary>
            <param name="query">Text to search</param>
            <param name="pageNo">Page no. to get</param>
            <param name="limit">Amount of results to get</param>
            <response code="200">Returns pagination and list of nests</response>
            <response code="400">If the provided data is incorrect.</response>
        </member>
        <member name="M:TopicalBirdAPI.Controllers.NestController.GetPaginatedNests(System.Int32,System.Int32)">
            <summary>
            Get all nests
            </summary>
            <param name="pageNo">Search page number</param>
            <param name="limit">Amount of results to return</param>
            <response code="200">Returns pagination and list of nests</response>
            <response code="400">If the provided data is incorrect.</response>
        </member>
        <member name="M:TopicalBirdAPI.Controllers.NestController.GetMyNests">
            <summary>
            Get nests moderated by authenticated user
            </summary>
            <response code="200">Returns list of nests moderated by user</response>
            <response code="401">The user is not logged in.</response>
        </member>
        <member name="M:TopicalBirdAPI.Controllers.NestController.UpdateNest(System.Guid,TopicalBirdAPI.Data.DTO.NestDTO.UpdateNestRequest)">
            <summary>
            Updates nest data
            </summary>
            <param name="id">Id of nest to update</param>
            <param name="newNest">DTO used to retrieve data in a contained way.</param>
            <response code="200">Returns udpated nest</response>
            <response code="400">If provided data is invalid.</response>
            <response code="401">If user is not logged in</response>
            <response code="500">If an unexpected error happens.</response>
        </member>
        <member name="M:TopicalBirdAPI.Controllers.PostsController.CreateNewPost(TopicalBirdAPI.Data.DTO.PostDTO.CreatePostRequest)">
            <summary>
            Creates a new post in nest.
            </summary>
            <param name="dto">The data transfer object containing the post details and optional media files.</param>
            <returns>A response containing the created post details.</returns>
            <response code="200">Returns the newly created post.</response>
            <response code="400">If the model state is invalid or if media processing fails.</response>
            <response code="401">If the user is not authenticated.</response>
            <response code="404">If the specified Nest is not found.</response>
            <response code="500">If an unexpected server error occurs.</response>
        </member>
        <member name="M:TopicalBirdAPI.Controllers.PostsController.GetSinglePost(System.Guid)">
            <summary>
            Get a post by ID.
            </summary>
            <param name="postId">The unique id of the post.</param>
            <returns>A response containing the post details.</returns>
            <response code="200">Returns the requested post.</response>
            <response code="404">If the post is not found.</response>
        </member>
        <member name="M:TopicalBirdAPI.Controllers.PostsController.GetPostsOfNestViaTitle(System.String,System.Int32,System.Int32)">
            <summary>
            Gets all posts for Nest
            </summary>
            <param name="nestTitle">The title of the Nest.</param>
            <param name="pageNo">Page number to fetch. Defaults to 1.</param>
            <param name="limit">Amount of posts that will be returned per page. Maximum is 50. Defaults to 20.</param>
            <returns>A paged list of posts from the Nest.</returns>
            <response code="200">Returns the paged list of posts.</response>
        </member>
        <member name="M:TopicalBirdAPI.Controllers.PostsController.GetPostsOfUserViaId(System.Guid,System.Int32,System.Int32)">
            <summary>
            Gets all posts from user ID
            </summary>
            <param name="userId">The unique id of the user.</param>
            <param name="pageNo">Page number to fetch. Defaults to 1.</param>
            <param name="limit">Amount of posts that will be returned per page. Maximum is 50. Defaults to 20.</param>
            <returns>A paged list of posts authored by the user.</returns>
            <response code="200">Returns the paged list of posts.</response>
        </member>
        <member name="M:TopicalBirdAPI.Controllers.PostsController.GetPostsOfUserViaHandle(System.String,System.Int32,System.Int32)">
            <summary>
            Get all posts from username
            </summary>
            <param name="userHandle">The username of the user.</param>
            <param name="pageNo">Page number to fetch. Defaults to 1.</param>
            <param name="limit">Amount of posts that will be returned per page. Maximum is 50. Defaults to 20.</param>
            <returns>A paged list of posts authored by the user.</returns>
            <response code="200">Returns the paged list of posts.</response>
        </member>
        <member name="M:TopicalBirdAPI.Controllers.PostsController.GetLatestPosts(System.String,System.Int32,System.Int32)">
            <summary>
            Gets latest posts
            </summary>
            <param name="nest">Title of the Nest where posts will be fetched. Optional.</param>
            <param name="pageNo">Page number to fetch. Defaults to 1.</param>
            <param name="limit">Amount of posts that will be returned per page. Maximum is 50. Defaults to 20.</param>
            <returns>A paged list of the latest posts.</returns>
            <response code="200">Returns the paged list of posts.</response>
        </member>
        <member name="M:TopicalBirdAPI.Controllers.PostsController.GetPopularPosts(System.String,System.Int32,System.Int32)">
            <summary>
            Get popular posts
            </summary>
            <param name="nest">Title of the Nest where posts will be fetched. Optional.</param>
            <param name="pageNo">Page number to fetch. Defaults to 1.</param>
            <param name="limit">Amount of posts that will be returned per page. Maximum is 50. Defaults to 20.</param>
            <returns>A paged list of the popular posts.</returns>
            <response code="200">Returns the paged list of posts.</response>
        </member>
        <member name="M:TopicalBirdAPI.Controllers.PostsController.UpdatePostViaId(System.Guid,TopicalBirdAPI.Data.DTO.PostDTO.PostUpdateRequest)">
            <summary>
            Updates the content of an existing post.
            </summary>
            <param name="postId">The unique id of the post to update.</param>
            <param name="dto">The data transfer object containing the new content.</param>
            <returns>A confirmation message.</returns>
            <response code="200">If the post was successfully updated.</response>
            <response code="204">If the post content was the same and no update was performed.</response>
            <response code="400">If the model state is invalid.</response>
            <response code="401">If the user is not authenticated.</response>
            <response code="403">If the authenticated user is not the author of the post.</response>
            <response code="404">If the post is not found.</response>
        </member>
        <member name="M:TopicalBirdAPI.Controllers.PostsController.DeletePostViaId(System.Guid)">
            <summary>
            Deletes a post by its ID.
            </summary>
            <param name="postId">The unique identifier (GUID) of the post to delete.</param>
            <returns>A confirmation message or a 204 if the post was already deleted.</returns>
            <response code="200">If the post was successfully deleted.</response>
            <response code="204">If the post was not found (idempotent delete).</response>
            <response code="401">If the user is not authenticated.</response>
            <response code="403">If the authenticated user is not the author or an Admin.</response>
            <response code="500">If a file cleanup or other server error occurs.</response>
        </member>
        <member name="M:TopicalBirdAPI.Controllers.UsersController.GetAllUsers">
            <summary>
            Gets all users
            </summary>
            <remarks>
            Admin only endpoint.
            </remarks>
        </member>
        <member name="M:TopicalBirdAPI.Controllers.UsersController.GetCurrentUser">
            <summary>
            Get authenticated user
            </summary>
        </member>
        <member name="M:TopicalBirdAPI.Controllers.UsersController.GetUserById(System.Guid)">
            <summary>
            Get user by ID
            </summary>
            <param name="id">Id of user</param>
        </member>
        <member name="M:TopicalBirdAPI.Controllers.UsersController.GetByEmail(System.String)">
            <summary>
            Get user by Email
            </summary>
            <param name="email">Email address of user</param>
            <remarks>
            Admin only endpoint.
            </remarks>
        </member>
        <member name="M:TopicalBirdAPI.Controllers.UsersController.GetByUsername(System.String)">
            <summary>
            Get user by username
            </summary>
            <param name="username">Username/Handle of user</param>
        </member>
        <member name="M:TopicalBirdAPI.Controllers.UsersController.GetBySearch(System.String)">
            <summary>
            Search for users
            </summary>
            <param name="query">Text to search</param>
            <remarks>
            Requires authentication.
            
            Matches query with Handle or DisplayName.
            </remarks>
        </member>
        <member name="M:TopicalBirdAPI.Controllers.UsersController.UpdateUser(System.Guid,TopicalBirdAPI.Data.DTO.UsersDTO.UpdateUserRequest)">
            <summary>
            Updates user details
            </summary>
            <param name="id">Id of user</param>
            <param name="dto">Data Transfer Object for UserUpdate</param>
            <remarks>
            DisplayName and Icon (Avatar)     
            </remarks>
        </member>
        <member name="M:TopicalBirdAPI.Controllers.UsersController.BanUser(System.Guid)">
            <summary>
            Bans a user
            </summary>
            <param name="id">Id of user getting banned</param>
            <remarks>
            Admin only endpoint.
            </remarks>
        </member>
        <member name="M:TopicalBirdAPI.Controllers.UsersController.UnbanUser(System.Guid)">
            <summary>
            Unbans a user
            </summary>
            <param name="id">Id of user getting unbanned</param>
            <remarks>
            Admin only endpoint.
            </remarks>
        </member>
        <member name="M:TopicalBirdAPI.Controllers.UsersController.PromoteToAdmin(System.Guid)">
            <summary>
            Promotes to an admin
            </summary>
            <param name="id">Id of user getting promoted</param>
            <remarks>
            Admin only endpoint.
            </remarks>
        </member>
        <member name="T:TopicalBirdAPI.Controllers.VoteController">
            <summary>
            Controls votes
            </summary>
        </member>
        <member name="M:TopicalBirdAPI.Controllers.VoteController.#ctor(TopicalBirdAPI.Data.AppDbContext,Microsoft.AspNetCore.Identity.UserManager{TopicalBirdAPI.Models.Users},TopicalBirdAPI.Helpers.LoggingHelper)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:TopicalBirdAPI.Controllers.VoteController.CastVote(System.Guid,TopicalBirdAPI.Data.DTO.VoteDTO.CreateVoteRequest)">
            <summary>
            Casts a vote
            </summary>
            <param name="postId">Post that is getting the vote</param>
            <param name="dto">Helper class for getting value from client</param>
            <response code="200">Returns vote info. If delete, returns null.</response>
            <response code="400">If provided data is invalid.</response>
            <response code="401">If user is not logged in.</response>
            <response code="404">If post is not found.</response>
            <response code="409">If vote has not changed.</response>
        </member>
        <member name="M:TopicalBirdAPI.Controllers.VoteController.GetScore(System.Guid)">
            <summary>
            Gets vote score of a post
            </summary>
            <param name="postId">Id of post to check vote of</param>
            <response code="200">Returns the score of post,</response>
            <response code="404">If post is not found</response>
        </member>
        <member name="T:TopicalBirdAPI.Data.API.ConflictResponse">
            <summary>
            Represents an API response structure used to indicate a 409 Conflict error.
            It provides details about the resource or variable that caused the conflict.
            </summary>
        </member>
        <member name="P:TopicalBirdAPI.Data.API.ConflictResponse.Type">
            <summary>
            The fully qualified type name of the variable or resource that is in conflict.
            </summary>
            <example>System.String</example>
        </member>
        <member name="P:TopicalBirdAPI.Data.API.ConflictResponse.Variable">
            <summary>
            The name of the variable, parameter, or property that caused the conflict.
            </summary>
            <example>Username</example>
        </member>
        <member name="P:TopicalBirdAPI.Data.API.ConflictResponse.Message">
            <summary>
            A descriptive message detailing what may have caused the conflict.
            </summary>
        </member>
        <member name="M:TopicalBirdAPI.Data.API.ConflictResponse.Create``1(``0,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:TopicalBirdAPI.Data.API.ConflictResponse"/> class.
            </summary>
            <typeparam name="T">The type of the variable that is in conflict.</typeparam>
            <param name="variable">The variable that is in conflict (used to determine its type and name).</param>
            <param name="message">An optional message detailing the cause of the conflict.</param>
            <returns>A new <see cref="T:TopicalBirdAPI.Data.API.ConflictResponse"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the provided variable is null.</exception>
        </member>
        <member name="T:TopicalBirdAPI.Data.API.ErrorResponse">
            <summary>
            Standardized response object for all API error statuses.
            This structure is used for consistent error reporting across the application.
            </summary>
        </member>
        <member name="P:TopicalBirdAPI.Data.API.ErrorResponse.Message">
            <summary>
            A brief, high-level summary of the error.
            </summary>
            <example>Validation Failed</example>
        </member>
        <member name="P:TopicalBirdAPI.Data.API.ErrorResponse.Description">
            <summary>
            General description or additional details for the error.
            </summary>
        </member>
        <member name="P:TopicalBirdAPI.Data.API.ErrorResponse.Errors">
            <summary>
            Dictionary of field-specific errors, typically used for **400 Bad Request** (Validation).
            Key is the field name, Value is an array of error messages.
            </summary>
        </member>
        <member name="P:TopicalBirdAPI.Data.API.ErrorResponse.ReferenceCode">
            <summary>
            A unique identifier generated by the server for internal logging and traceability. 
            This code can be provided to support for quicker issue resolution.
            </summary>
        </member>
        <member name="M:TopicalBirdAPI.Data.API.ErrorResponse.Create(System.String,System.String,System.String)">
            <summary>
            Creates a general ErrorResponse (e.g., for 500 or 409).
            </summary>
            <param name="message">The main message for the error.</param>
            <param name="description">An optional detailed description.</param>
            <param name="refCode">An optional unique reference code for logging.</param>
            <returns>A new <see cref="T:TopicalBirdAPI.Data.API.ErrorResponse"/> instance.</returns>
        </member>
        <member name="M:TopicalBirdAPI.Data.API.ErrorResponse.CreateFromModelState(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)">
            <summary>
            Creates an ErrorResponse specifically from the **ModelStateDictionary** (for **400 Bad Request**).
            </summary>
            <param name="modelState">The ModelStateDictionary containing validation errors.</param>
            <returns>An <see cref="T:TopicalBirdAPI.Data.API.ErrorResponse"/> populated with validation errors.</returns>
        </member>
        <member name="T:TopicalBirdAPI.Data.API.SuccessResponse`1">
            <summary>
            Represents a successful API response, optionally containing data of a specified type.
            This structure is commonly used for consistent response formatting.
            </summary>
            <typeparam name="T">The type of the data/content contained in the response.</typeparam>
        </member>
        <member name="P:TopicalBirdAPI.Data.API.SuccessResponse`1.Message">
            <summary>
            A descriptive message about the success of the operation.
            </summary>
            <example>Operation completed successfully.</example>
        </member>
        <member name="P:TopicalBirdAPI.Data.API.SuccessResponse`1.Content">
            <summary>
            The payload or data content returned by the successful operation. This can be null.
            </summary>
        </member>
        <member name="M:TopicalBirdAPI.Data.API.SuccessResponse`1.Create(System.String,`0)">
            <summary>
            Creates a new instance of the <see cref="T:TopicalBirdAPI.Data.API.SuccessResponse`1"/> class with a message and content.
            </summary>
            <param name="message">The message to include in the response.</param>
            <param name="Content">The content (data payload) to include in the response.</param>
            <returns>A new <see cref="T:TopicalBirdAPI.Data.API.SuccessResponse`1"/> instance.</returns>
        </member>
        <member name="T:TopicalBirdAPI.Data.DTO.AuthDTO.ChangePasswordRequest">
            <summary>
            Data Transfer Object (DTO) used for requesting a password change.
            </summary>
        </member>
        <member name="P:TopicalBirdAPI.Data.DTO.AuthDTO.ChangePasswordRequest.OldPassword">
            <summary>
            The user's current password. This is required for security verification.
            </summary>
            <example>P@sswOrd123</example>
        </member>
        <member name="P:TopicalBirdAPI.Data.DTO.AuthDTO.ChangePasswordRequest.NewPassword">
            <summary>
            The desired new password for the user's account.
            </summary>
            <example>NewP@ssw0rd456</example>
        </member>
        <member name="P:TopicalBirdAPI.Data.DTO.AuthDTO.ChangePasswordRequest.ConfirmNewPassword">
            <summary>
            A confirmation of the new password, which must match the value in the <see cref="P:TopicalBirdAPI.Data.DTO.AuthDTO.ChangePasswordRequest.NewPassword"/> field.
            </summary>
            <example>NewP@ssw0rd456</example>
        </member>
        <member name="T:TopicalBirdAPI.Data.DTO.AuthDTO.UserLoginRequest">
            <summary>
            Helper class used to submit user credentials for login authentication.
            </summary>
        </member>
        <member name="P:TopicalBirdAPI.Data.DTO.AuthDTO.UserLoginRequest.Email">
            <summary>
            The email address of the user. This is used as the primary identifier for login.
            </summary>
            <example>user.name@example.com</example>
        </member>
        <member name="P:TopicalBirdAPI.Data.DTO.AuthDTO.UserLoginRequest.Password">
            <summary>
            The user's password.
            </summary>
            <example>P@sswOrd123</example>
        </member>
        <member name="P:TopicalBirdAPI.Data.DTO.AuthDTO.UserLoginRequest.RememberMe">
            <summary>
            A flag indicating whether the system should remember the user's login session. Defaults to false.
            </summary>
            <example>true</example>
        </member>
        <member name="T:TopicalBirdAPI.Data.DTO.CommentDTO.CommentResponse">
            <summary>
            Data Transfer Object (DTO) representing a single comment returned in an API response.
            </summary>
        </member>
        <member name="P:TopicalBirdAPI.Data.DTO.CommentDTO.CommentResponse.Id">
            <summary>
            The unique identifier for the comment.
            </summary>
            <example>3fa85f64-5717-4562-b3fc-2c963f66afa6</example>
        </member>
        <member name="P:TopicalBirdAPI.Data.DTO.CommentDTO.CommentResponse.Content">
            <summary>
            The text content of the comment.
            </summary>
            <example>This is a fantastic point! I completely agree.</example>
        </member>
        <member name="P:TopicalBirdAPI.Data.DTO.CommentDTO.CommentResponse.CreatedAt">
            <summary>
            The date and time when the comment was created.
            </summary>
            <example>2025-10-15T14:30:00Z</example>
        </member>
        <member name="P:TopicalBirdAPI.Data.DTO.CommentDTO.CommentResponse.Author">
            <summary>
            The author of the comment, represented by a <see cref="T:TopicalBirdAPI.Data.DTO.UsersDTO.UserResponse"/> DTO.
            </summary>
        </member>
        <member name="M:TopicalBirdAPI.Data.DTO.CommentDTO.CommentResponse.FromComment(TopicalBirdAPI.Models.Comment)">
            <summary>
            Creates a <see cref="T:TopicalBirdAPI.Data.DTO.CommentDTO.CommentResponse"/> DTO from a <see cref="T:TopicalBirdAPI.Models.Comment"/> model.
            </summary>
            <param name="cmt">The Comment model object to convert.</param>
            <returns>A fully populated <see cref="T:TopicalBirdAPI.Data.DTO.CommentDTO.CommentResponse"/> instance.</returns>
        </member>
        <member name="T:TopicalBirdAPI.Data.DTO.CommentDTO.CreateCommentRequest">
            <summary>
            Helper class used to submit a comment
            </summary>
        </member>
        <member name="P:TopicalBirdAPI.Data.DTO.CommentDTO.CreateCommentRequest.Content">
            <summary>
            Content of comment. Min length: 1, Max len: 10,000.
            </summary>
        </member>
        <member name="T:TopicalBirdAPI.Data.DTO.NestDTO.CreateNestRequest">
            <summary>
            Helper model for creating new Nest
            </summary>
        </member>
        <member name="P:TopicalBirdAPI.Data.DTO.NestDTO.CreateNestRequest.Title">
            <summary>
            Title of nest. Also used as slug
            </summary>
        </member>
        <member name="P:TopicalBirdAPI.Data.DTO.NestDTO.CreateNestRequest.Description">
            <summary>
            Description of Nest
            </summary>
        </member>
        <member name="P:TopicalBirdAPI.Data.DTO.NestDTO.CreateNestRequest.DisplayName">
            <summary>
            Display name of Nest
            </summary>
        </member>
        <member name="P:TopicalBirdAPI.Data.DTO.NestDTO.CreateNestRequest.Icon">
            <summary>
            Icon or Logo of Nest. Only Images and GIF allowed. Max 5MB.
            </summary>
        </member>
        <member name="P:TopicalBirdAPI.Data.DTO.UsersDTO.CreateUserRequest.Email">
            <summary>
            User email address
            </summary>
        </member>
        <member name="P:TopicalBirdAPI.Data.DTO.UsersDTO.CreateUserRequest.Password">
            <summary>
            Must be at least 8 char long and must consist of uppercase, lowercase, special and numerical char.
            </summary>
        </member>
        <member name="P:TopicalBirdAPI.Data.DTO.UsersDTO.CreateUserRequest.Handle">
            <summary>
            Username. Case is ignored.
            </summary>
        </member>
        <member name="P:TopicalBirdAPI.Data.DTO.UsersDTO.CreateUserRequest.DisplayName">
            <summary>
            Display name. Case is kept.
            </summary>
        </member>
        <member name="P:TopicalBirdAPI.Data.DTO.UsersDTO.CreateUserRequest.Icon">
            <summary>
            Avatar image. Allowed types: .JPG, .PNG, .WEBP, .GIF. Maximum 5MB.
            </summary>
        </member>
        <member name="T:TopicalBirdAPI.Data.DTO.UsersDTO.UpdateUserRequest">
            <summary>
            Represents the data required to update a user's profile.
            </summary>
        </member>
        <member name="P:TopicalBirdAPI.Data.DTO.UsersDTO.UpdateUserRequest.DisplayName">
            <summary>
            The new public display name for the user.
            </summary>
            <example>Shruti Thakur</example>
        </member>
        <member name="P:TopicalBirdAPI.Data.DTO.UsersDTO.UpdateUserRequest.Icon">
            <summary>
            The new profile image file for the user. Maximum 5MB. Only images and GIFs allowed.
            </summary>
            <example>photo.png</example>
        </member>
        <member name="T:TopicalBirdAPI.Data.DTO.VoteDTO.CreateVoteRequest">
            <summary>
            Helper function for creating vote
            </summary>
        </member>
        <member name="P:TopicalBirdAPI.Data.DTO.VoteDTO.CreateVoteRequest.VoteValue">
            <summary>
            Score given. -1 for downvote, +1 for upvote, 0 to remove vote
            </summary>
        </member>
        <member name="T:TopicalBirdAPI.Migrations.InitIdentity">
            <inheritdoc />
        </member>
        <member name="M:TopicalBirdAPI.Migrations.InitIdentity.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:TopicalBirdAPI.Migrations.InitIdentity.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:TopicalBirdAPI.Migrations.InitIdentity.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:TopicalBirdAPI.Migrations.UpdateToPostsModel">
            <inheritdoc />
        </member>
        <member name="M:TopicalBirdAPI.Migrations.UpdateToPostsModel.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:TopicalBirdAPI.Migrations.UpdateToPostsModel.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:TopicalBirdAPI.Migrations.UpdateToPostsModel.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:TopicalBirdAPI.Migrations.PostVotesUpdate">
            <inheritdoc />
        </member>
        <member name="M:TopicalBirdAPI.Migrations.PostVotesUpdate.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:TopicalBirdAPI.Migrations.PostVotesUpdate.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:TopicalBirdAPI.Migrations.PostVotesUpdate.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:TopicalBirdAPI.Migrations.CommentCreatedAtField">
            <inheritdoc />
        </member>
        <member name="M:TopicalBirdAPI.Migrations.CommentCreatedAtField.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:TopicalBirdAPI.Migrations.CommentCreatedAtField.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:TopicalBirdAPI.Migrations.CommentCreatedAtField.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:TopicalBirdAPI.Migrations.MoreCreatedAtFields">
            <inheritdoc />
        </member>
        <member name="M:TopicalBirdAPI.Migrations.MoreCreatedAtFields.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:TopicalBirdAPI.Migrations.MoreCreatedAtFields.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:TopicalBirdAPI.Migrations.MoreCreatedAtFields.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:TopicalBirdAPI.Migrations.NewPostsNewMe">
            <inheritdoc />
        </member>
        <member name="M:TopicalBirdAPI.Migrations.NewPostsNewMe.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:TopicalBirdAPI.Migrations.NewPostsNewMe.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:TopicalBirdAPI.Migrations.NewPostsNewMe.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:TopicalBirdAPI.Migrations.NewDTO">
            <inheritdoc />
        </member>
        <member name="M:TopicalBirdAPI.Migrations.NewDTO.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:TopicalBirdAPI.Migrations.NewDTO.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:TopicalBirdAPI.Migrations.NewDTO.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:TopicalBirdAPI.Migrations.NestsComplete">
            <inheritdoc />
        </member>
        <member name="M:TopicalBirdAPI.Migrations.NestsComplete.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:TopicalBirdAPI.Migrations.NestsComplete.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:TopicalBirdAPI.Migrations.NestsComplete.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:TopicalBirdAPI.Migrations.AddHandleToUsers">
            <inheritdoc />
        </member>
        <member name="M:TopicalBirdAPI.Migrations.AddHandleToUsers.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:TopicalBirdAPI.Migrations.AddHandleToUsers.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:TopicalBirdAPI.Migrations.AddHandleToUsers.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:TopicalBirdAPI.Migrations.NewRegister">
            <inheritdoc />
        </member>
        <member name="M:TopicalBirdAPI.Migrations.NewRegister.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:TopicalBirdAPI.Migrations.NewRegister.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:TopicalBirdAPI.Migrations.NewRegister.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:TopicalBirdAPI.Migrations.PostVoteUpdate">
            <inheritdoc />
        </member>
        <member name="M:TopicalBirdAPI.Migrations.PostVoteUpdate.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:TopicalBirdAPI.Migrations.PostVoteUpdate.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:TopicalBirdAPI.Migrations.PostVoteUpdate.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:TopicalBirdAPI.Migrations.PostVoteUpdate2">
            <inheritdoc />
        </member>
        <member name="M:TopicalBirdAPI.Migrations.PostVoteUpdate2.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:TopicalBirdAPI.Migrations.PostVoteUpdate2.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:TopicalBirdAPI.Migrations.PostVoteUpdate2.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
    </members>
</doc>
