{
  "openapi": "3.0.1",
  "info": {
    "title": "Topicalbird API",
    "description": "Backend API for Topicalbird forums.",
    "version": "v1"
  },
  "paths": {
    "/api/Auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Register a new user",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "Email",
                  "Handle",
                  "Password"
                ],
                "type": "object",
                "properties": {
                  "Email": {
                    "type": "string",
                    "description": "User email address",
                    "format": "email"
                  },
                  "Password": {
                    "type": "string",
                    "description": "Must be at least 8 char long and must consist of uppercase, lowercase, special and numerical char.",
                    "format": "password"
                  },
                  "Handle": {
                    "maxLength": 50,
                    "type": "string",
                    "description": "Username. Case is ignored."
                  },
                  "DisplayName": {
                    "maxLength": 100,
                    "type": "string",
                    "description": "Display name. Case is kept."
                  },
                  "Icon": {
                    "type": "string",
                    "description": "Avatar image. Allowed types: .JPG, .PNG, .WEBP, .GIF. Maximum 5MB.",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "Email": {
                  "style": "form"
                },
                "Password": {
                  "style": "form"
                },
                "Handle": {
                  "style": "form"
                },
                "DisplayName": {
                  "style": "form"
                },
                "Icon": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the newly created user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "If the data provided is not valid."
          },
          "403": {
            "description": "If you are logged in."
          },
          "409": {
            "description": "If username or email is already taken."
          },
          "500": {
            "description": "If an unexpected error happens."
          }
        }
      }
    },
    "/api/Auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login existing user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserLoginRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserLoginRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserLoginRequest"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "If the data provided is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "If email or password is incorrect.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Logs the user in and sets the cookies.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logout current user",
        "responses": {
          "200": {
            "description": "Confirms user has logged out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Auth/password": {
      "patch": {
        "tags": [
          "Auth"
        ],
        "summary": "Change password",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns confirmation of password change",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "If the data provided is invalid."
          },
          "401": {
            "description": "If the user is not logged in."
          }
        }
      }
    },
    "/api/Comments/add/{postId}": {
      "post": {
        "tags": [
          "Comments"
        ],
        "summary": "Create a new comment",
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "Post ID of post to comment on",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "Content"
                ],
                "type": "object",
                "properties": {
                  "Content": {
                    "maxLength": 10000,
                    "minLength": 1,
                    "type": "string",
                    "description": "Content of comment. Min length: 1, Max len: 10,000."
                  }
                }
              },
              "encoding": {
                "Content": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns created comment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentResponseSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "If provided data is invalid."
          },
          "401": {
            "description": "If user is not logged in."
          },
          "404": {
            "description": "If post is not found."
          }
        }
      }
    },
    "/api/Comments/get/{postId}": {
      "get": {
        "tags": [
          "Comments"
        ],
        "summary": "Get all comment of post",
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "The post ID to fetch",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of comments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentResponseListSuccessResponse"
                }
              }
            }
          },
          "404": {
            "description": "If the post is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Comments/edit/{commentId}": {
      "patch": {
        "tags": [
          "Comments"
        ],
        "summary": "Update a comment",
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "description": "Id of comment to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "Content"
                ],
                "type": "object",
                "properties": {
                  "Content": {
                    "maxLength": 10000,
                    "minLength": 1,
                    "type": "string",
                    "description": "Content of comment. Min length: 1, Max len: 10,000."
                  }
                }
              },
              "encoding": {
                "Content": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated comment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentResponseSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "If provided data is incorrect."
          },
          "403": {
            "description": "If user is not the comment author."
          },
          "404": {
            "description": "If comment was not found."
          }
        }
      }
    },
    "/api/Comments/remove/{commentId}": {
      "delete": {
        "tags": [
          "Comments"
        ],
        "summary": "Deletes a comment",
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "description": "Id of comment to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessResponse"
                }
              }
            }
          },
          "404": {
            "description": "If comment is not found"
          },
          "403": {
            "description": "If user isnt author or admin"
          },
          "401": {
            "description": "If user int logged in"
          }
        }
      }
    },
    "/api/Nest/new": {
      "post": {
        "tags": [
          "Nest"
        ],
        "summary": "Create a new nest",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "Title"
                ],
                "type": "object",
                "properties": {
                  "Title": {
                    "type": "string",
                    "description": "Title of nest. Also used as slug"
                  },
                  "Description": {
                    "maxLength": 500,
                    "type": "string",
                    "description": "Description of Nest"
                  },
                  "DisplayName": {
                    "maxLength": 50,
                    "type": "string",
                    "description": "Display name of Nest"
                  },
                  "Icon": {
                    "type": "string",
                    "description": "Icon or Logo of Nest. Only Images and GIF allowed. Max 5MB.",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "Title": {
                  "style": "form"
                },
                "Description": {
                  "style": "form"
                },
                "DisplayName": {
                  "style": "form"
                },
                "Icon": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns newly created nest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestResponseSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "If provided data is invalid."
          },
          "401": {
            "description": "If user is not logged in"
          },
          "409": {
            "description": "If nest already exists."
          },
          "500": {
            "description": "If an unexpected error happens."
          }
        }
      }
    },
    "/api/Nest/{id}": {
      "get": {
        "tags": [
          "Nest"
        ],
        "summary": "Get nest by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of nest",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the nest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestResponseSuccessResponse"
                }
              }
            }
          },
          "404": {
            "description": "If nest is not found."
          }
        }
      },
      "patch": {
        "tags": [
          "Nest"
        ],
        "summary": "Updates nest data",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of nest to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "Description": {
                    "maxLength": 500,
                    "type": "string"
                  },
                  "DisplayName": {
                    "maxLength": 50,
                    "type": "string"
                  },
                  "Icon": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "Description": {
                  "style": "form"
                },
                "DisplayName": {
                  "style": "form"
                },
                "Icon": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns udpated nest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestResponseSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "If provided data is invalid."
          },
          "401": {
            "description": "If user is not logged in"
          },
          "500": {
            "description": "If an unexpected error happens."
          }
        }
      }
    },
    "/api/Nest/title/{title}": {
      "get": {
        "tags": [
          "Nest"
        ],
        "summary": "Get nest by nest title",
        "parameters": [
          {
            "name": "title",
            "in": "path",
            "description": "Title of nest",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the nest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestResponseSuccessResponse"
                }
              }
            }
          },
          "404": {
            "description": "If nest is not found."
          }
        }
      }
    },
    "/api/Nest/search/{query}": {
      "get": {
        "tags": [
          "Nest"
        ],
        "summary": "Search a nest",
        "parameters": [
          {
            "name": "query",
            "in": "path",
            "description": "Text to search",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNo",
            "in": "query",
            "description": "Page no. to get",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Amount of results to get",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns pagination and list of nests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "If the provided data is incorrect."
          }
        }
      }
    },
    "/api/Nest": {
      "get": {
        "tags": [
          "Nest"
        ],
        "summary": "Get all nests",
        "parameters": [
          {
            "name": "pageNo",
            "in": "query",
            "description": "Search page number",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Amount of results to return",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns pagination and list of nests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "If the provided data is incorrect."
          }
        }
      }
    },
    "/api/Nest/me": {
      "get": {
        "tags": [
          "Nest"
        ],
        "summary": "Get nests moderated by authenticated user",
        "responses": {
          "200": {
            "description": "Returns list of nests moderated by user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestResponseListSuccessResponse"
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in."
          }
        }
      }
    },
    "/api/Posts/new": {
      "post": {
        "tags": [
          "Posts"
        ],
        "summary": "Creates a new post in nest.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "Content",
                  "NestTitle",
                  "Title"
                ],
                "type": "object",
                "properties": {
                  "Title": {
                    "maxLength": 200,
                    "type": "string"
                  },
                  "Content": {
                    "type": "string"
                  },
                  "NestTitle": {
                    "type": "string"
                  },
                  "Images": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  },
                  "Alts": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "encoding": {
                "Title": {
                  "style": "form"
                },
                "Content": {
                  "style": "form"
                },
                "NestTitle": {
                  "style": "form"
                },
                "Images": {
                  "style": "form"
                },
                "Alts": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the newly created post.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "If the model state is invalid or if media processing fails.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "If the specified Nest is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "If an unexpected server error occurs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Posts/{postId}": {
      "get": {
        "tags": [
          "Posts"
        ],
        "summary": "Get a post by ID.",
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "The unique id of the post.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested post.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectSuccessResponse"
                }
              }
            }
          },
          "404": {
            "description": "If the post is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Posts/nest": {
      "get": {
        "tags": [
          "Posts"
        ],
        "summary": "Gets all posts for Nest",
        "parameters": [
          {
            "name": "nestTitle",
            "in": "query",
            "description": "The title of the Nest.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNo",
            "in": "query",
            "description": "Page number to fetch. Defaults to 1.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Amount of posts that will be returned per page. Maximum is 50. Defaults to 20.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the paged list of posts.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Posts/user/id/{userId}": {
      "get": {
        "tags": [
          "Posts"
        ],
        "summary": "Gets all posts from user ID",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The unique id of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "pageNo",
            "in": "query",
            "description": "Page number to fetch. Defaults to 1.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Amount of posts that will be returned per page. Maximum is 50. Defaults to 20.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the paged list of posts.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Posts/user/username": {
      "get": {
        "tags": [
          "Posts"
        ],
        "summary": "Get all posts from username",
        "parameters": [
          {
            "name": "userHandle",
            "in": "query",
            "description": "The username of the user.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNo",
            "in": "query",
            "description": "Page number to fetch. Defaults to 1.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Amount of posts that will be returned per page. Maximum is 50. Defaults to 20.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the paged list of posts.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Posts/latest": {
      "get": {
        "tags": [
          "Posts"
        ],
        "summary": "Gets latest posts",
        "parameters": [
          {
            "name": "nest",
            "in": "query",
            "description": "Title of the Nest where posts will be fetched. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNo",
            "in": "query",
            "description": "Page number to fetch. Defaults to 1.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Amount of posts that will be returned per page. Maximum is 50. Defaults to 20.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the paged list of posts.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Posts/popular": {
      "get": {
        "tags": [
          "Posts"
        ],
        "summary": "Get popular posts",
        "parameters": [
          {
            "name": "nest",
            "in": "query",
            "description": "Title of the Nest where posts will be fetched. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNo",
            "in": "query",
            "description": "Page number to fetch. Defaults to 1.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Amount of posts that will be returned per page. Maximum is 50. Defaults to 20.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the paged list of posts.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Posts/update/{postId}": {
      "patch": {
        "tags": [
          "Posts"
        ],
        "summary": "Updates the content of an existing post.",
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "The unique id of the post to update.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "Content": {
                    "maxLength": 10000,
                    "type": "string"
                  }
                }
              },
              "encoding": {
                "Content": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "If the post was successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostResponseSuccessResponse"
                }
              }
            }
          },
          "204": {
            "description": "If the post content was the same and no update was performed."
          },
          "400": {
            "description": "If the model state is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "If the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "If the authenticated user is not the author of the post.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "If the post is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Posts/delete/{postId}": {
      "delete": {
        "tags": [
          "Posts"
        ],
        "summary": "Deletes a post by its ID.",
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "The unique identifier (GUID) of the post to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "If the post was successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessResponse"
                }
              }
            }
          },
          "204": {
            "description": "If the post was not found (idempotent delete)."
          },
          "401": {
            "description": "If the user is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "If the authenticated user is not the author or an Admin.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "If a file cleanup or other server error occurs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Gets all users",
        "description": "Admin only endpoint.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseListSuccessResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Users/me": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get authenticated user",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseSuccessResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Users/get/id/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of user",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseSuccessResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Users/get/email/{email}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user by Email",
        "description": "Admin only endpoint.",
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "description": "Email address of user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseSuccessResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Users/get/username/{username}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user by username",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "Username/Handle of user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseSuccessResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Users/search": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Search for users",
        "description": "Requires authentication.\r\n\r\nMatches query with Handle or DisplayName.",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Text to search",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseListSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Users/update/{id}": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Updates user details",
        "description": "DisplayName and Icon (Avatar)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of user",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "DisplayName": {
                    "type": "string",
                    "description": "The new public display name for the user.",
                    "example": "Shruti Thakur"
                  },
                  "Icon": {
                    "type": "string",
                    "description": "The new profile image file for the user. Maximum 5MB. Only images and GIFs allowed.",
                    "format": "binary",
                    "example": "photo.png"
                  }
                }
              },
              "encoding": {
                "DisplayName": {
                  "style": "form"
                },
                "Icon": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Users/ban/{id}": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Bans a user",
        "description": "Admin only endpoint.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of user getting banned",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Users/unban/{id}": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Unbans a user",
        "description": "Admin only endpoint.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of user getting unbanned",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Users/promote/{id}": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Promotes to an admin",
        "description": "Admin only endpoint.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of user getting promoted",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Vote/{postId}": {
      "post": {
        "tags": [
          "Vote"
        ],
        "summary": "Casts a vote",
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "Post that is getting the vote",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Helper class for getting value from client",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVoteRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVoteRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVoteRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns vote info. If delete, returns null.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoteResponseSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "If provided data is invalid."
          },
          "401": {
            "description": "If user is not logged in."
          },
          "404": {
            "description": "If post is not found."
          },
          "409": {
            "description": "If vote has not changed."
          }
        }
      }
    },
    "/api/Vote/{postId}/score": {
      "get": {
        "tags": [
          "Vote"
        ],
        "summary": "Gets vote score of a post",
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "Id of post to check vote of",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the score of post,",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectSuccessResponse"
                }
              }
            }
          },
          "404": {
            "description": "If post is not found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ChangePasswordRequest": {
        "required": [
          "confirmNewPassword",
          "newPassword",
          "oldPassword"
        ],
        "type": "object",
        "properties": {
          "oldPassword": {
            "minLength": 1,
            "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[^\\da-zA-Z]).{6,}$",
            "type": "string",
            "description": "The user's current password. This is required for security verification.",
            "format": "password",
            "example": "P@sswOrd123"
          },
          "newPassword": {
            "minLength": 1,
            "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[^\\da-zA-Z]).{6,}$",
            "type": "string",
            "description": "The desired new password for the user's account.",
            "format": "password",
            "example": "NewP@ssw0rd456"
          },
          "confirmNewPassword": {
            "minLength": 1,
            "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[^\\da-zA-Z]).{6,}$",
            "type": "string",
            "description": "A confirmation of the new password, which must match the value in the TopicalBirdAPI.Data.DTO.AuthDTO.ChangePasswordRequest.NewPassword field.",
            "format": "password",
            "example": "NewP@ssw0rd456"
          }
        },
        "additionalProperties": false,
        "description": "Data Transfer Object (DTO) used for requesting a password change."
      },
      "CommentResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for the comment.",
            "format": "uuid",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "content": {
            "type": "string",
            "description": "The text content of the comment.",
            "nullable": true,
            "example": "This is a fantastic point! I completely agree."
          },
          "createdAt": {
            "type": "string",
            "description": "The date and time when the comment was created.",
            "format": "date-time",
            "example": "2025-10-15T14:30:00Z"
          },
          "author": {
            "$ref": "#/components/schemas/UserResponse"
          }
        },
        "additionalProperties": false,
        "description": "Data Transfer Object (DTO) representing a single comment returned in an API response."
      },
      "CommentResponseListSuccessResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "A descriptive message about the success of the operation.",
            "nullable": true,
            "example": "Operation completed successfully."
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommentResponse"
            },
            "description": "The payload or data content returned by the successful operation. This can be null.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a successful API response, optionally containing data of a specified type.\r\nThis structure is commonly used for consistent response formatting."
      },
      "CommentResponseSuccessResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "A descriptive message about the success of the operation.",
            "nullable": true,
            "example": "Operation completed successfully."
          },
          "content": {
            "$ref": "#/components/schemas/CommentResponse"
          }
        },
        "additionalProperties": false,
        "description": "Represents a successful API response, optionally containing data of a specified type.\r\nThis structure is commonly used for consistent response formatting."
      },
      "CreateVoteRequest": {
        "required": [
          "voteValue"
        ],
        "type": "object",
        "properties": {
          "voteValue": {
            "maxLength": 1,
            "minLength": -1,
            "type": "integer",
            "description": "Score given. -1 for downvote, +1 for upvote, 0 to remove vote",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Helper function for creating vote"
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "A brief, high-level summary of the error.",
            "nullable": true,
            "example": "Validation Failed"
          },
          "description": {
            "type": "string",
            "description": "General description or additional details for the error.",
            "nullable": true
          },
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Dictionary of field-specific errors, typically used for **400 Bad Request** (Validation).\r\nKey is the field name, Value is an array of error messages.",
            "nullable": true
          },
          "referenceCode": {
            "type": "string",
            "description": "A unique identifier generated by the server for internal logging and traceability. \r\nThis code can be provided to support for quicker issue resolution.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Standardized response object for all API error statuses.\r\nThis structure is used for consistent error reporting across the application."
      },
      "MediaResponse": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "nullable": true
          },
          "alt": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NestResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "icon": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "moderator": {
            "$ref": "#/components/schemas/UserResponse"
          }
        },
        "additionalProperties": false
      },
      "NestResponseListSuccessResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "A descriptive message about the success of the operation.",
            "nullable": true,
            "example": "Operation completed successfully."
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NestResponse"
            },
            "description": "The payload or data content returned by the successful operation. This can be null.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a successful API response, optionally containing data of a specified type.\r\nThis structure is commonly used for consistent response formatting."
      },
      "NestResponseSuccessResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "A descriptive message about the success of the operation.",
            "nullable": true,
            "example": "Operation completed successfully."
          },
          "content": {
            "$ref": "#/components/schemas/NestResponse"
          }
        },
        "additionalProperties": false,
        "description": "Represents a successful API response, optionally containing data of a specified type.\r\nThis structure is commonly used for consistent response formatting."
      },
      "ObjectSuccessResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "A descriptive message about the success of the operation.",
            "nullable": true,
            "example": "Operation completed successfully."
          },
          "content": {
            "description": "The payload or data content returned by the successful operation. This can be null.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a successful API response, optionally containing data of a specified type.\r\nThis structure is commonly used for consistent response formatting."
      },
      "PostResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "content": {
            "type": "string",
            "nullable": true
          },
          "author": {
            "$ref": "#/components/schemas/UserResponse"
          },
          "nest": {
            "$ref": "#/components/schemas/NestResponse"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "photos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaResponse"
            },
            "nullable": true
          },
          "votes": {
            "type": "integer",
            "format": "int32"
          },
          "comments": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "PostResponseSuccessResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "A descriptive message about the success of the operation.",
            "nullable": true,
            "example": "Operation completed successfully."
          },
          "content": {
            "$ref": "#/components/schemas/PostResponse"
          }
        },
        "additionalProperties": false,
        "description": "Represents a successful API response, optionally containing data of a specified type.\r\nThis structure is commonly used for consistent response formatting."
      },
      "StringSuccessResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "A descriptive message about the success of the operation.",
            "nullable": true,
            "example": "Operation completed successfully."
          },
          "content": {
            "type": "string",
            "description": "The payload or data content returned by the successful operation. This can be null.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a successful API response, optionally containing data of a specified type.\r\nThis structure is commonly used for consistent response formatting."
      },
      "UserLoginRequest": {
        "required": [
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "email": {
            "minLength": 1,
            "type": "string",
            "description": "The email address of the user. This is used as the primary identifier for login.",
            "format": "email",
            "example": "user.name@example.com"
          },
          "password": {
            "minLength": 1,
            "type": "string",
            "description": "The user's password.",
            "format": "password",
            "example": "P@sswOrd123"
          },
          "rememberMe": {
            "type": "boolean",
            "description": "A flag indicating whether the system should remember the user's login session. Defaults to false.",
            "example": true
          }
        },
        "additionalProperties": false,
        "description": "Helper class used to submit user credentials for login authentication."
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "handle": {
            "type": "string",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "isAdmin": {
            "type": "boolean"
          },
          "isBanned": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "UserResponseListSuccessResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "A descriptive message about the success of the operation.",
            "nullable": true,
            "example": "Operation completed successfully."
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserResponse"
            },
            "description": "The payload or data content returned by the successful operation. This can be null.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a successful API response, optionally containing data of a specified type.\r\nThis structure is commonly used for consistent response formatting."
      },
      "UserResponseSuccessResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "A descriptive message about the success of the operation.",
            "nullable": true,
            "example": "Operation completed successfully."
          },
          "content": {
            "$ref": "#/components/schemas/UserResponse"
          }
        },
        "additionalProperties": false,
        "description": "Represents a successful API response, optionally containing data of a specified type.\r\nThis structure is commonly used for consistent response formatting."
      },
      "VoteResponse": {
        "type": "object",
        "properties": {
          "voteValue": {
            "type": "integer",
            "format": "int32"
          },
          "post": {
            "$ref": "#/components/schemas/PostResponse"
          },
          "user": {
            "$ref": "#/components/schemas/UserResponse"
          }
        },
        "additionalProperties": false
      },
      "VoteResponseSuccessResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "A descriptive message about the success of the operation.",
            "nullable": true,
            "example": "Operation completed successfully."
          },
          "content": {
            "$ref": "#/components/schemas/VoteResponse"
          }
        },
        "additionalProperties": false,
        "description": "Represents a successful API response, optionally containing data of a specified type.\r\nThis structure is commonly used for consistent response formatting."
      }
    }
  }
}